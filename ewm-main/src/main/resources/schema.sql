CREATE TABLE IF NOT EXISTS users (
    id      BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name    VARCHAR(128) NOT NULL,
    email   VARCHAR(256) NOT NULL UNIQUE,
);

CREATE TABLE IF NOT EXISTS categories (
    id      BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name    VARCHAR(128) NOT NULL UNIQUE,
);

CREATE TABLE IF NOT EXISTS locations (
    id      BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    lat     FLOAT NOT NULL,
    lon     FLOAT NOT NULL,
);

CREATE TABLE IF NOT EXISTS events (
    id                  BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    annotation          VARCHAR NOT NULL,
    category_id         BIGINT NOT NULL,
    created_on          TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    description         VARCHAR NOT NULL,
    confirmed_requests  INTEGER,
    event_date          TIMESTAMP NOT NULL,
    initiator_id        BIGINT NOT NULL,
    location_id         BIGINT NOT NULL,
    paid BOOL           DEFAULT FALSE NOT NULL,
    participant_limit   INTEGER DEFAULT 0,
    published_on        TIMESTAMP,
    request_moderation  BOOL DEFAULT TRUE NOT NULL,
    state               VARCHAR(32),
    title               VARCHAR(128) NOT NULL,
    FOREIGN KEY (category_id) REFERENCES categories(id),
    FOREIGN KEY (initiator_id) REFERENCES users(id),
    FOREIGN KEY (location_id) REFERENCES locations(id)
);

CREATE TABLE IF NOT EXISTS requests (
    id              BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created         TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    event_id        BIGINT NOT NULL,
    requester_id    BIGINT NOT NULL,
    request_status  VARCHAR(50),
    FOREIGN KEY (event_id) REFERENCES events(id),
    FOREIGN KEY (requester_id) REFERENCES users(id)
);

CREATE TABLE IF NOT EXISTS compilations (
    id      BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    pinned  BOOL NOT NULL DEFAULT FALSE,
);

CREATE TABLE IF NOT EXISTS compilation_events (
    compilation_id  BIGINT,
    event_id        BIGINT,
    FOREIGN KEY (compilation_id) REFERENCES compilations(id),
    FOREIGN KEY (event_id) REFERENCES events(id)
);